# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import account_pb2 as account__pb2


class AccountServiceStub(object):
    """
    AccountService is used to manage accounts in HD Wallet.
    It supports generating of addresses, listing unspents and balances for specific account or
    list of addresses and selecting unspents.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CreateAccount = channel.unary_unary(
                '/account.AccountService/CreateAccount',
                request_serializer=account__pb2.CreateAccountRequest.SerializeToString,
                response_deserializer=account__pb2.CreateAccountReply.FromString,
                )
        self.UpdateAccount = channel.unary_unary(
                '/account.AccountService/UpdateAccount',
                request_serializer=account__pb2.UpdateAccountRequest.SerializeToString,
                response_deserializer=account__pb2.UpdateAccountReply.FromString,
                )
        self.ListAccount = channel.unary_unary(
                '/account.AccountService/ListAccount',
                request_serializer=account__pb2.ListAccountRequest.SerializeToString,
                response_deserializer=account__pb2.ListAccountReply.FromString,
                )
        self.Address = channel.unary_unary(
                '/account.AccountService/Address',
                request_serializer=account__pb2.AddressRequest.SerializeToString,
                response_deserializer=account__pb2.AddressReply.FromString,
                )
        self.Balance = channel.unary_unary(
                '/account.AccountService/Balance',
                request_serializer=account__pb2.BalanceRequest.SerializeToString,
                response_deserializer=account__pb2.BalanceReply.FromString,
                )
        self.Unspents = channel.unary_unary(
                '/account.AccountService/Unspents',
                request_serializer=account__pb2.UnspentsRequest.SerializeToString,
                response_deserializer=account__pb2.UnspentsReply.FromString,
                )
        self.SelectUnspents = channel.unary_unary(
                '/account.AccountService/SelectUnspents',
                request_serializer=account__pb2.SelectUnspentsRequest.SerializeToString,
                response_deserializer=account__pb2.SelectUnspentsReply.FromString,
                )


class AccountServiceServicer(object):
    """
    AccountService is used to manage accounts in HD Wallet.
    It supports generating of addresses, listing unspents and balances for specific account or
    list of addresses and selecting unspents.
    """

    def CreateAccount(self, request, context):
        """Create creates new account.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateAccount(self, request, context):
        """Updates name of existing account.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListAccount(self, request, context):
        """List all accounts
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Address(self, request, context):
        """Generates new address for the account.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Balance(self, request, context):
        """Returns balance for the account, or specific list of account's addresses.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Unspents(self, request, context):
        """Return unspents for the account, or specific list of account's addresses
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SelectUnspents(self, request, context):
        """
        Selects unspents, to be used in another transaction, for provided target amount and strategy.
        Selected unspents are locked for predefined amount of time so that race conditions are avoided.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_AccountServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'CreateAccount': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateAccount,
                    request_deserializer=account__pb2.CreateAccountRequest.FromString,
                    response_serializer=account__pb2.CreateAccountReply.SerializeToString,
            ),
            'UpdateAccount': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateAccount,
                    request_deserializer=account__pb2.UpdateAccountRequest.FromString,
                    response_serializer=account__pb2.UpdateAccountReply.SerializeToString,
            ),
            'ListAccount': grpc.unary_unary_rpc_method_handler(
                    servicer.ListAccount,
                    request_deserializer=account__pb2.ListAccountRequest.FromString,
                    response_serializer=account__pb2.ListAccountReply.SerializeToString,
            ),
            'Address': grpc.unary_unary_rpc_method_handler(
                    servicer.Address,
                    request_deserializer=account__pb2.AddressRequest.FromString,
                    response_serializer=account__pb2.AddressReply.SerializeToString,
            ),
            'Balance': grpc.unary_unary_rpc_method_handler(
                    servicer.Balance,
                    request_deserializer=account__pb2.BalanceRequest.FromString,
                    response_serializer=account__pb2.BalanceReply.SerializeToString,
            ),
            'Unspents': grpc.unary_unary_rpc_method_handler(
                    servicer.Unspents,
                    request_deserializer=account__pb2.UnspentsRequest.FromString,
                    response_serializer=account__pb2.UnspentsReply.SerializeToString,
            ),
            'SelectUnspents': grpc.unary_unary_rpc_method_handler(
                    servicer.SelectUnspents,
                    request_deserializer=account__pb2.SelectUnspentsRequest.FromString,
                    response_serializer=account__pb2.SelectUnspentsReply.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'account.AccountService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class AccountService(object):
    """
    AccountService is used to manage accounts in HD Wallet.
    It supports generating of addresses, listing unspents and balances for specific account or
    list of addresses and selecting unspents.
    """

    @staticmethod
    def CreateAccount(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/account.AccountService/CreateAccount',
            account__pb2.CreateAccountRequest.SerializeToString,
            account__pb2.CreateAccountReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UpdateAccount(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/account.AccountService/UpdateAccount',
            account__pb2.UpdateAccountRequest.SerializeToString,
            account__pb2.UpdateAccountReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListAccount(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/account.AccountService/ListAccount',
            account__pb2.ListAccountRequest.SerializeToString,
            account__pb2.ListAccountReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Address(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/account.AccountService/Address',
            account__pb2.AddressRequest.SerializeToString,
            account__pb2.AddressReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Balance(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/account.AccountService/Balance',
            account__pb2.BalanceRequest.SerializeToString,
            account__pb2.BalanceReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Unspents(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/account.AccountService/Unspents',
            account__pb2.UnspentsRequest.SerializeToString,
            account__pb2.UnspentsReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SelectUnspents(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/account.AccountService/SelectUnspents',
            account__pb2.SelectUnspentsRequest.SerializeToString,
            account__pb2.SelectUnspentsReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
