# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import notification_pb2 as notification__pb2


class NotificationServiceStub(object):
    """
    NotificationService is used to notify interested parties about wallet events.
    It offers various options like streams that acts like websocket and webhooks where 3rd party would
    receive events in in direct http call.
    **************//
    STREAMS    //
    **************//
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.TransactionNotifications = channel.unary_stream(
                '/notification.NotificationService/TransactionNotifications',
                request_serializer=notification__pb2.TransactionNotificationsRequest.SerializeToString,
                response_deserializer=notification__pb2.TransactionNotificationsReply.FromString,
                )
        self.UnspentsNotifications = channel.unary_stream(
                '/notification.NotificationService/UnspentsNotifications',
                request_serializer=notification__pb2.UnspentsNotificationsRequest.SerializeToString,
                response_deserializer=notification__pb2.UnspentsNotificationsReply.FromString,
                )
        self.AddWebhook = channel.unary_unary(
                '/notification.NotificationService/AddWebhook',
                request_serializer=notification__pb2.AddWebhookRequest.SerializeToString,
                response_deserializer=notification__pb2.AddWebhookReply.FromString,
                )
        self.RemoveWebhook = channel.unary_unary(
                '/notification.NotificationService/RemoveWebhook',
                request_serializer=notification__pb2.RemoveWebhookRequest.SerializeToString,
                response_deserializer=notification__pb2.RemoveWebhookReply.FromString,
                )
        self.ListWebhooks = channel.unary_unary(
                '/notification.NotificationService/ListWebhooks',
                request_serializer=notification__pb2.ListWebhooksRequest.SerializeToString,
                response_deserializer=notification__pb2.ListWebhooksReply.FromString,
                )


class NotificationServiceServicer(object):
    """
    NotificationService is used to notify interested parties about wallet events.
    It offers various options like streams that acts like websocket and webhooks where 3rd party would
    receive events in in direct http call.
    **************//
    STREAMS    //
    **************//
    """

    def TransactionNotifications(self, request, context):
        """Notifies about transactions related to the wallet
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UnspentsNotifications(self, request, context):
        """Notifies about unspents related to the wallet's account
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AddWebhook(self, request, context):
        """***************//
        WEBHOOKS    //
        ***************//

        Adds a webhook registered for some kind of event.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RemoveWebhook(self, request, context):
        """Removes some previously added webhook.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListWebhooks(self, request, context):
        """Returns registered webhooks
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_NotificationServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'TransactionNotifications': grpc.unary_stream_rpc_method_handler(
                    servicer.TransactionNotifications,
                    request_deserializer=notification__pb2.TransactionNotificationsRequest.FromString,
                    response_serializer=notification__pb2.TransactionNotificationsReply.SerializeToString,
            ),
            'UnspentsNotifications': grpc.unary_stream_rpc_method_handler(
                    servicer.UnspentsNotifications,
                    request_deserializer=notification__pb2.UnspentsNotificationsRequest.FromString,
                    response_serializer=notification__pb2.UnspentsNotificationsReply.SerializeToString,
            ),
            'AddWebhook': grpc.unary_unary_rpc_method_handler(
                    servicer.AddWebhook,
                    request_deserializer=notification__pb2.AddWebhookRequest.FromString,
                    response_serializer=notification__pb2.AddWebhookReply.SerializeToString,
            ),
            'RemoveWebhook': grpc.unary_unary_rpc_method_handler(
                    servicer.RemoveWebhook,
                    request_deserializer=notification__pb2.RemoveWebhookRequest.FromString,
                    response_serializer=notification__pb2.RemoveWebhookReply.SerializeToString,
            ),
            'ListWebhooks': grpc.unary_unary_rpc_method_handler(
                    servicer.ListWebhooks,
                    request_deserializer=notification__pb2.ListWebhooksRequest.FromString,
                    response_serializer=notification__pb2.ListWebhooksReply.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'notification.NotificationService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class NotificationService(object):
    """
    NotificationService is used to notify interested parties about wallet events.
    It offers various options like streams that acts like websocket and webhooks where 3rd party would
    receive events in in direct http call.
    **************//
    STREAMS    //
    **************//
    """

    @staticmethod
    def TransactionNotifications(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/notification.NotificationService/TransactionNotifications',
            notification__pb2.TransactionNotificationsRequest.SerializeToString,
            notification__pb2.TransactionNotificationsReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UnspentsNotifications(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/notification.NotificationService/UnspentsNotifications',
            notification__pb2.UnspentsNotificationsRequest.SerializeToString,
            notification__pb2.UnspentsNotificationsReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AddWebhook(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/notification.NotificationService/AddWebhook',
            notification__pb2.AddWebhookRequest.SerializeToString,
            notification__pb2.AddWebhookReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RemoveWebhook(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/notification.NotificationService/RemoveWebhook',
            notification__pb2.RemoveWebhookRequest.SerializeToString,
            notification__pb2.RemoveWebhookReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListWebhooks(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/notification.NotificationService/ListWebhooks',
            notification__pb2.ListWebhooksRequest.SerializeToString,
            notification__pb2.ListWebhooksReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
