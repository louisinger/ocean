# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import wallet_pb2 as wallet__pb2


class WalletServiceStub(object):
    """
    WalletService is used to create, open and restore HD Wallet.
    It stores signing and blinding seeds used for signing and blinding of transactions.
    After HD Wallet is created seeds are encrypted and stored in disc.
    On each daemon restart HD Wallet is locked and needs to be open.
    It it possible to import seeds and restore HD Wallet.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GenSeed = channel.unary_unary(
                '/wallet.WalletService/GenSeed',
                request_serializer=wallet__pb2.GenSeedRequest.SerializeToString,
                response_deserializer=wallet__pb2.GenSeedReply.FromString,
                )
        self.CreateWallet = channel.unary_unary(
                '/wallet.WalletService/CreateWallet',
                request_serializer=wallet__pb2.CreateWalletRequest.SerializeToString,
                response_deserializer=wallet__pb2.CreateWalletReply.FromString,
                )
        self.Unlock = channel.unary_unary(
                '/wallet.WalletService/Unlock',
                request_serializer=wallet__pb2.UnlockRequest.SerializeToString,
                response_deserializer=wallet__pb2.UnlockReply.FromString,
                )
        self.ChangePassword = channel.unary_unary(
                '/wallet.WalletService/ChangePassword',
                request_serializer=wallet__pb2.ChangePasswordRequest.SerializeToString,
                response_deserializer=wallet__pb2.ChangePasswordReply.FromString,
                )
        self.RestoreWallet = channel.unary_unary(
                '/wallet.WalletService/RestoreWallet',
                request_serializer=wallet__pb2.RestoreWalletRequest.SerializeToString,
                response_deserializer=wallet__pb2.RestoreWalletReply.FromString,
                )
        self.Status = channel.unary_unary(
                '/wallet.WalletService/Status',
                request_serializer=wallet__pb2.StatusRequest.SerializeToString,
                response_deserializer=wallet__pb2.StatusReply.FromString,
                )


class WalletServiceServicer(object):
    """
    WalletService is used to create, open and restore HD Wallet.
    It stores signing and blinding seeds used for signing and blinding of transactions.
    After HD Wallet is created seeds are encrypted and stored in disc.
    On each daemon restart HD Wallet is locked and needs to be open.
    It it possible to import seeds and restore HD Wallet.
    """

    def GenSeed(self, request, context):
        """
        GenSeed is used to generate signing and blinding seed that are to be passed
        to Create rpc which will create HD Wallet
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateWallet(self, request, context):
        """CreateWallet is used to create HD Wallet based on signing, blinding seeds and password
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Unlock(self, request, context):
        """
        Unlock is used to unlock existing HD Wallet based on password so that daemon can serve
        other calls
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ChangePassword(self, request, context):
        """ChangePassword is used to change password with which HD Wallet is encrypted
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RestoreWallet(self, request, context):
        """RestoreWallet is used to restore HD Wallet based on signing and blinding seeds
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Status(self, request, context):
        """Status is used by other services to check current status of HD Wallet
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_WalletServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GenSeed': grpc.unary_unary_rpc_method_handler(
                    servicer.GenSeed,
                    request_deserializer=wallet__pb2.GenSeedRequest.FromString,
                    response_serializer=wallet__pb2.GenSeedReply.SerializeToString,
            ),
            'CreateWallet': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateWallet,
                    request_deserializer=wallet__pb2.CreateWalletRequest.FromString,
                    response_serializer=wallet__pb2.CreateWalletReply.SerializeToString,
            ),
            'Unlock': grpc.unary_unary_rpc_method_handler(
                    servicer.Unlock,
                    request_deserializer=wallet__pb2.UnlockRequest.FromString,
                    response_serializer=wallet__pb2.UnlockReply.SerializeToString,
            ),
            'ChangePassword': grpc.unary_unary_rpc_method_handler(
                    servicer.ChangePassword,
                    request_deserializer=wallet__pb2.ChangePasswordRequest.FromString,
                    response_serializer=wallet__pb2.ChangePasswordReply.SerializeToString,
            ),
            'RestoreWallet': grpc.unary_unary_rpc_method_handler(
                    servicer.RestoreWallet,
                    request_deserializer=wallet__pb2.RestoreWalletRequest.FromString,
                    response_serializer=wallet__pb2.RestoreWalletReply.SerializeToString,
            ),
            'Status': grpc.unary_unary_rpc_method_handler(
                    servicer.Status,
                    request_deserializer=wallet__pb2.StatusRequest.FromString,
                    response_serializer=wallet__pb2.StatusReply.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'wallet.WalletService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class WalletService(object):
    """
    WalletService is used to create, open and restore HD Wallet.
    It stores signing and blinding seeds used for signing and blinding of transactions.
    After HD Wallet is created seeds are encrypted and stored in disc.
    On each daemon restart HD Wallet is locked and needs to be open.
    It it possible to import seeds and restore HD Wallet.
    """

    @staticmethod
    def GenSeed(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/wallet.WalletService/GenSeed',
            wallet__pb2.GenSeedRequest.SerializeToString,
            wallet__pb2.GenSeedReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CreateWallet(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/wallet.WalletService/CreateWallet',
            wallet__pb2.CreateWalletRequest.SerializeToString,
            wallet__pb2.CreateWalletReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Unlock(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/wallet.WalletService/Unlock',
            wallet__pb2.UnlockRequest.SerializeToString,
            wallet__pb2.UnlockReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ChangePassword(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/wallet.WalletService/ChangePassword',
            wallet__pb2.ChangePasswordRequest.SerializeToString,
            wallet__pb2.ChangePasswordReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RestoreWallet(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/wallet.WalletService/RestoreWallet',
            wallet__pb2.RestoreWalletRequest.SerializeToString,
            wallet__pb2.RestoreWalletReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Status(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/wallet.WalletService/Status',
            wallet__pb2.StatusRequest.SerializeToString,
            wallet__pb2.StatusReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
