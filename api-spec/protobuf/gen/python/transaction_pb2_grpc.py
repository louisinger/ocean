# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import transaction_pb2 as transaction__pb2


class TransactionServiceStub(object):
    """
    TransactionService is used to craft and sign various kind's of transactions.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Fee = channel.unary_unary(
                '/transaction.TransactionService/Fee',
                request_serializer=transaction__pb2.FeeRequest.SerializeToString,
                response_deserializer=transaction__pb2.FeeReply.FromString,
                )
        self.UpdateFee = channel.unary_unary(
                '/transaction.TransactionService/UpdateFee',
                request_serializer=transaction__pb2.UpdateFeeRequest.SerializeToString,
                response_deserializer=transaction__pb2.UpdateFeeReply.FromString,
                )
        self.SignTransaction = channel.unary_unary(
                '/transaction.TransactionService/SignTransaction',
                request_serializer=transaction__pb2.SignTransactionRequest.SerializeToString,
                response_deserializer=transaction__pb2.SignTransactionReply.FromString,
                )
        self.BroadcastTransaction = channel.unary_unary(
                '/transaction.TransactionService/BroadcastTransaction',
                request_serializer=transaction__pb2.BroadcastTransactionRequest.SerializeToString,
                response_deserializer=transaction__pb2.BroadcastTransactionReply.FromString,
                )
        self.CreatePsbt = channel.unary_unary(
                '/transaction.TransactionService/CreatePsbt',
                request_serializer=transaction__pb2.CreatePsbtRequest.SerializeToString,
                response_deserializer=transaction__pb2.CreatePsbtReply.FromString,
                )
        self.BlindPsbt = channel.unary_unary(
                '/transaction.TransactionService/BlindPsbt',
                request_serializer=transaction__pb2.BlindPsbtRequest.SerializeToString,
                response_deserializer=transaction__pb2.BlindPsbtReply.FromString,
                )
        self.SignPsbt = channel.unary_unary(
                '/transaction.TransactionService/SignPsbt',
                request_serializer=transaction__pb2.SignPsbtRequest.SerializeToString,
                response_deserializer=transaction__pb2.SignPsbtReply.FromString,
                )
        self.Mint = channel.unary_unary(
                '/transaction.TransactionService/Mint',
                request_serializer=transaction__pb2.MintRequest.SerializeToString,
                response_deserializer=transaction__pb2.MintReply.FromString,
                )
        self.ReMint = channel.unary_unary(
                '/transaction.TransactionService/ReMint',
                request_serializer=transaction__pb2.ReMintRequest.SerializeToString,
                response_deserializer=transaction__pb2.ReMintReply.FromString,
                )
        self.Burn = channel.unary_unary(
                '/transaction.TransactionService/Burn',
                request_serializer=transaction__pb2.BurnRequest.SerializeToString,
                response_deserializer=transaction__pb2.BurnReply.FromString,
                )
        self.Transfer = channel.unary_unary(
                '/transaction.TransactionService/Transfer',
                request_serializer=transaction__pb2.TransferRequest.SerializeToString,
                response_deserializer=transaction__pb2.TransferReply.FromString,
                )
        self.PegInAddress = channel.unary_unary(
                '/transaction.TransactionService/PegInAddress',
                request_serializer=transaction__pb2.PegInAddressRequest.SerializeToString,
                response_deserializer=transaction__pb2.PegInAddressReply.FromString,
                )
        self.ClaimPegIn = channel.unary_unary(
                '/transaction.TransactionService/ClaimPegIn',
                request_serializer=transaction__pb2.ClaimPegInRequest.SerializeToString,
                response_deserializer=transaction__pb2.ClaimPegInReply.FromString,
                )


class TransactionServiceServicer(object):
    """
    TransactionService is used to craft and sign various kind's of transactions.
    """

    def Fee(self, request, context):
        """Returns fee cost of one byte in satoshi's.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateFee(self, request, context):
        """Updates fee cost of one byte.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SignTransaction(self, request, context):
        """Signs transaction hex.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def BroadcastTransaction(self, request, context):
        """Broadcast signed transaction.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreatePsbt(self, request, context):
        """Creates unsigned, non-blinded psbt based on provided inputs and outputs.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def BlindPsbt(self, request, context):
        """Blind unblinded psbt.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SignPsbt(self, request, context):
        """Sign unsigned psbt.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Mint(self, request, context):
        """Mint asset.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ReMint(self, request, context):
        """ReMint asset.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Burn(self, request, context):
        """Burn minted assets belongs to list of addresses.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Transfer(self, request, context):
        """Transfer asset to one or more receivers.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PegInAddress(self, request, context):
        """
        Returns information needed for claim pegin to move coins to the side-chain.
        The user should send coins from their Bitcoin wallet to the main-chain address returned.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ClaimPegIn(self, request, context):
        """
        Claim coins from the main chain by creating a pegin transaction with the necessary metadata after the corresponding Bitcoin transaction.
        Note that the transaction will not be relayed unless it is buried at least 102 blocks deep.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_TransactionServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Fee': grpc.unary_unary_rpc_method_handler(
                    servicer.Fee,
                    request_deserializer=transaction__pb2.FeeRequest.FromString,
                    response_serializer=transaction__pb2.FeeReply.SerializeToString,
            ),
            'UpdateFee': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateFee,
                    request_deserializer=transaction__pb2.UpdateFeeRequest.FromString,
                    response_serializer=transaction__pb2.UpdateFeeReply.SerializeToString,
            ),
            'SignTransaction': grpc.unary_unary_rpc_method_handler(
                    servicer.SignTransaction,
                    request_deserializer=transaction__pb2.SignTransactionRequest.FromString,
                    response_serializer=transaction__pb2.SignTransactionReply.SerializeToString,
            ),
            'BroadcastTransaction': grpc.unary_unary_rpc_method_handler(
                    servicer.BroadcastTransaction,
                    request_deserializer=transaction__pb2.BroadcastTransactionRequest.FromString,
                    response_serializer=transaction__pb2.BroadcastTransactionReply.SerializeToString,
            ),
            'CreatePsbt': grpc.unary_unary_rpc_method_handler(
                    servicer.CreatePsbt,
                    request_deserializer=transaction__pb2.CreatePsbtRequest.FromString,
                    response_serializer=transaction__pb2.CreatePsbtReply.SerializeToString,
            ),
            'BlindPsbt': grpc.unary_unary_rpc_method_handler(
                    servicer.BlindPsbt,
                    request_deserializer=transaction__pb2.BlindPsbtRequest.FromString,
                    response_serializer=transaction__pb2.BlindPsbtReply.SerializeToString,
            ),
            'SignPsbt': grpc.unary_unary_rpc_method_handler(
                    servicer.SignPsbt,
                    request_deserializer=transaction__pb2.SignPsbtRequest.FromString,
                    response_serializer=transaction__pb2.SignPsbtReply.SerializeToString,
            ),
            'Mint': grpc.unary_unary_rpc_method_handler(
                    servicer.Mint,
                    request_deserializer=transaction__pb2.MintRequest.FromString,
                    response_serializer=transaction__pb2.MintReply.SerializeToString,
            ),
            'ReMint': grpc.unary_unary_rpc_method_handler(
                    servicer.ReMint,
                    request_deserializer=transaction__pb2.ReMintRequest.FromString,
                    response_serializer=transaction__pb2.ReMintReply.SerializeToString,
            ),
            'Burn': grpc.unary_unary_rpc_method_handler(
                    servicer.Burn,
                    request_deserializer=transaction__pb2.BurnRequest.FromString,
                    response_serializer=transaction__pb2.BurnReply.SerializeToString,
            ),
            'Transfer': grpc.unary_unary_rpc_method_handler(
                    servicer.Transfer,
                    request_deserializer=transaction__pb2.TransferRequest.FromString,
                    response_serializer=transaction__pb2.TransferReply.SerializeToString,
            ),
            'PegInAddress': grpc.unary_unary_rpc_method_handler(
                    servicer.PegInAddress,
                    request_deserializer=transaction__pb2.PegInAddressRequest.FromString,
                    response_serializer=transaction__pb2.PegInAddressReply.SerializeToString,
            ),
            'ClaimPegIn': grpc.unary_unary_rpc_method_handler(
                    servicer.ClaimPegIn,
                    request_deserializer=transaction__pb2.ClaimPegInRequest.FromString,
                    response_serializer=transaction__pb2.ClaimPegInReply.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'transaction.TransactionService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class TransactionService(object):
    """
    TransactionService is used to craft and sign various kind's of transactions.
    """

    @staticmethod
    def Fee(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/transaction.TransactionService/Fee',
            transaction__pb2.FeeRequest.SerializeToString,
            transaction__pb2.FeeReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UpdateFee(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/transaction.TransactionService/UpdateFee',
            transaction__pb2.UpdateFeeRequest.SerializeToString,
            transaction__pb2.UpdateFeeReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SignTransaction(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/transaction.TransactionService/SignTransaction',
            transaction__pb2.SignTransactionRequest.SerializeToString,
            transaction__pb2.SignTransactionReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def BroadcastTransaction(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/transaction.TransactionService/BroadcastTransaction',
            transaction__pb2.BroadcastTransactionRequest.SerializeToString,
            transaction__pb2.BroadcastTransactionReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CreatePsbt(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/transaction.TransactionService/CreatePsbt',
            transaction__pb2.CreatePsbtRequest.SerializeToString,
            transaction__pb2.CreatePsbtReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def BlindPsbt(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/transaction.TransactionService/BlindPsbt',
            transaction__pb2.BlindPsbtRequest.SerializeToString,
            transaction__pb2.BlindPsbtReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SignPsbt(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/transaction.TransactionService/SignPsbt',
            transaction__pb2.SignPsbtRequest.SerializeToString,
            transaction__pb2.SignPsbtReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Mint(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/transaction.TransactionService/Mint',
            transaction__pb2.MintRequest.SerializeToString,
            transaction__pb2.MintReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ReMint(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/transaction.TransactionService/ReMint',
            transaction__pb2.ReMintRequest.SerializeToString,
            transaction__pb2.ReMintReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Burn(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/transaction.TransactionService/Burn',
            transaction__pb2.BurnRequest.SerializeToString,
            transaction__pb2.BurnReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Transfer(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/transaction.TransactionService/Transfer',
            transaction__pb2.TransferRequest.SerializeToString,
            transaction__pb2.TransferReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def PegInAddress(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/transaction.TransactionService/PegInAddress',
            transaction__pb2.PegInAddressRequest.SerializeToString,
            transaction__pb2.PegInAddressReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ClaimPegIn(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/transaction.TransactionService/ClaimPegIn',
            transaction__pb2.ClaimPegInRequest.SerializeToString,
            transaction__pb2.ClaimPegInReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
